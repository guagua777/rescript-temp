// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Aux = require("./libs/Aux.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Js_string = require("rescript/lib/js/js_string.js");

console.log("Hello, World!");

function fib(n) {
  if (n === 0 || n === 1) {
    return n;
  } else {
    return fib(n - 1 | 0) + fib(n - 2 | 0) | 0;
  }
}

console.log(fib(10));

console.log(6);

function addInt(a, b) {
  return a + b | 0;
}

function addFloat(a, b) {
  return a + b;
}

function addString(a, b) {
  return a + b;
}

console.log(4);

console.log(1 + 5.2);

console.log("hello world");

var longStr = "hello world,";

var shortStr = Js_string.slice(2, 5, longStr);

var shortStr2 = Js_string.slice(0, -1, longStr);

console.log(shortStr);

console.log(shortStr2);

console.log("=======================");

var idea = {
  name: "idea",
  age: 4
};

console.log("idea");

var newIdea = {
  name: "newidea",
  age: 4
};

console.log("newidea");

var myValue = {
  contents: 5
};

var five = myValue.contents;

myValue.contents = 6;

myValue.contents = 6;

var six = myValue.contents;

console.log(six);

function verifyName(ideaRecord) {
  if (ideaRecord.name === "idea") {
    console.log("idea");
    return ;
  }
  console.log("other....");
}

verifyName(idea);

verifyName(newIdea);

var myList = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
};

var message = "head is " + (1).toString();

console.log(message);

function printList(_list) {
  while(true) {
    var list = _list;
    if (!list) {
      return ;
    }
    console.log(list.hd);
    _list = list.tl;
    continue ;
  };
}

printList(myList);

printList(myList);

var anotherList = {
  hd: 0,
  tl: myList
};

printList(myList);

printList(anotherList);

var myArray = [
  "hello",
  "world",
  "how are you"
];

console.log(myArray[0]);

function matchStatus(st) {
  if (typeof st === "number") {
    return "nice";
  } else if (st.TAG === /* Fail */0) {
    return st._0;
  } else {
    return "Try " + String(st._0) + " times";
  }
}

console.log(matchStatus({
          TAG: /* Maybe */1,
          _0: 3
        }));

console.log("permission error");

for(var i = 0; i <= 3; ++i){
  console.log(i);
}

for(var i$1 = 3; i$1 >= 0; --i$1){
  console.log(i$1);
}

var $$break = {
  contents: false
};

while(!$$break.contents) {
  if (Math.random() > 0.3) {
    $$break.contents = true;
  } else {
    console.log("Still running");
  }
};

function addCoordinates(x, y) {
  var r = x + y | 0;
  console.log(r);
}

addCoordinates(5, 6);

addCoordinates(6, 5);

function addCoor(x, y) {
  return "x point : " + String(x) + ", y is " + String(y) + "";
}

console.log(addCoor(11, 10));

function add1(param) {
  return 1 + param | 0;
}

console.log(add1);

function listHas(_lst, item) {
  while(true) {
    var lst = _lst;
    if (!lst) {
      return false;
    }
    if (Caml_obj.equal(lst.hd, item)) {
      return true;
    }
    _lst = lst.tl;
    continue ;
  };
}

console.log(listHas({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: {
                hd: 4,
                tl: /* [] */0
              }
            }
          }
        }, 3));

console.log(listHas({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: {
                hd: 4,
                tl: /* [] */0
              }
            }
          }
        }, 5));

function is_even(x) {
  if (x === 0) {
    return true;
  } else {
    return is_odd(x - 1 | 0);
  }
}

function is_odd(x) {
  if (x === 0) {
    return false;
  } else {
    return is_even(x - 1 | 0);
  }
}

console.log(is_even(5));

function add(a, b) {
  return a + b | 0;
}

function add1$1(param) {
  return 1 + param | 0;
}

function add10(param) {
  return 10 + param | 0;
}

function add100(param) {
  return 100 + param | 0;
}

var sum1 = 116;

console.log(sum1);

var sum2 = 116;

console.log(sum2);

var n = Aux.module_add(2, 3);

function mul(a, b) {
  return Math.imul(a, b);
}

var Helper = {
  mul: mul
};

console.log(12);

var a = 1;

var immutable_a = 1;

var x = 12;

exports.a = a;
exports.fib = fib;
exports.addInt = addInt;
exports.addFloat = addFloat;
exports.addString = addString;
exports.longStr = longStr;
exports.shortStr = shortStr;
exports.shortStr2 = shortStr2;
exports.idea = idea;
exports.immutable_a = immutable_a;
exports.newIdea = newIdea;
exports.myValue = myValue;
exports.five = five;
exports.six = six;
exports.verifyName = verifyName;
exports.myList = myList;
exports.message = message;
exports.printList = printList;
exports.anotherList = anotherList;
exports.myArray = myArray;
exports.matchStatus = matchStatus;
exports.$$break = $$break;
exports.addCoordinates = addCoordinates;
exports.addCoor = addCoor;
exports.listHas = listHas;
exports.is_even = is_even;
exports.is_odd = is_odd;
exports.add = add;
exports.add1 = add1$1;
exports.add10 = add10;
exports.add100 = add100;
exports.sum1 = sum1;
exports.sum2 = sum2;
exports.n = n;
exports.Helper = Helper;
exports.x = x;
/*  Not a pure module */
